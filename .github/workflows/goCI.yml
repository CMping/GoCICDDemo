name: CI setup for Go # name the workflow
on: # "on" event keyword
  push:
    branches: [main] # identifying branch
    
jobs: # job to execute on event
  my-job:
    name: My Job
    runs-on: ubuntu-latest #specify OS in VM
    steps:
    
    - name: Print a greeting
      run: |
        ls
        echo Hello there! # run terminal command
        
    - name: Setup Go environment
      uses: actions/setup-go@v2.1.3
      with:
        # The Go version to download (if necessary) and use. Supports semver spec and ranges.
        go-version: 1.13.7 # optional
        
    - name: Show Go version # verify that Go is installed properly
      run: |
        go version # show go version
        
    - name: Checkout our codes # bring repo code to virtual envinronment
      uses: actions/checkout@v2
      
    - name: Check file system # check virtual environment has the files
      run: |
        ls
        cat calc.go # prints the content of calc.go
      
    - name: Checkout private repo remotely
      uses: actions/checkout@v2
      with:
        repository: lowkh2/GoSchoolRemoteExample # private repo that i am trying to access
        path: virtualRepoFolder # folder to save in the virtual environment
        token: ${{ secrets.GO_SECRET }} # pass to enter remote private repo
        
    - name: Check file system from private repo
      run: |
        cd virtualRepoFolder # access folder in virtual environment
        ls
        cat myText.txt 
        cd .. # exit the folder
        
    - name: Install Go dependencies
      run: |
        go get github.com/franela/goblin # adds package for Goblin testing
        go get github.com/tebeka/go2xunit # adds package for conversion
        go test -v # command to run go test
        go test -v | go2xunit > report.xml # run test again and output as report.xml
        ls # verify report is created
        cat report.xml
        
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v1 # checkout unit test publishing repo
      if: always() # always do it
      with:
        files: report.xml # publish the respective file
        
    - if: ${{ success() }}
      name: Create upload directory
      run: mkdir upload
      
    - name: Prepare documents
      run: mv report.xml ./upload
      
    - name: Prepare artifacts
      uses: actions/upload-artifact@v2
      with: 
        name: assetDocuments
        path: upload
        
    - name: Download content
      uses: actions/download-artifact@v2
      with:
        name: assetDocuments
        
    - if: ${{ failure() }} 
      name: Create issue notifications
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Build Failed
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: workflow-failed
        body: Workflow failed for commit ${{github.sha}}
        
    - name: Send telegram notification
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          The ${{ github.event_name }} event triggered final step.
          echo A push event is triggered.
      
      
      
      
